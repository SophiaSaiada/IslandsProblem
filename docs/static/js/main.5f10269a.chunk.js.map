{"version":3,"sources":["pages/BoardBuild/ChooseDimenssionPage.tsx","pages/BoardBuild/BoardEditor.tsx","utils/windowSizeHook.ts","pages/BoardBuild/SetDataPage.tsx","types/Board.ts","pages/BoardBuild/index.tsx","logic/IslandsProblemSolver.ts","pages/Solver/BoardVisualizer.tsx","pages/Solver/index.tsx","utils/sleep.ts","themes/custom.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","_","dimensionsConatiner","display","flexDirection","alignItems","crossSign","fontSize","margin","ChooseDimenssionPage","setBoardDim","classes","useState","width","setWidth","height","setHeight","Box","mb","Typography","className","TextField","label","variant","type","defaultValue","onChange","e","parseInt","target","value","m","Button","color","onClick","gridContainer","justifyContent","islandPaperContainer","islandPaper","fontFamily","lineHeight","textAlign","background","innerElementType","paddingBottom","forwardRef","props","ref","style","rest","paddingLeft","paddingTop","parseFloat","BoardEditor","boardDim","data","toggleCell","columnCount","rowCount","columnWidth","rowHeight","columnIndex","rowIndex","ButtonBase","focusRipple","key","left","top","Paper","backgroundColor","transition","elevation","useWindowSize","isClient","window","getSize","innerWidth","innerHeight","windowSize","setWindowSize","useEffect","addEventListener","handleResize","removeEventListener","controllersConatiner","position","bottom","backdropFilter","padding","SetDataPage","setBoardData","goHome","fullScreenMode","setFullScreenMode","range","map","__","setData","row","column","slice","Math","min","mt","component","IconButton","Home","FullscreenExit","Fullscreen","ml","floor","random","Board","dimensions","this","join","isInBounds","Error","JSON","stringify","callback","getCell","BoardBuildPage","setBoard","setDimensions","newData","board","originalBoard","sideEffect","quickRun","sleep","a","clone","nextIslandId","asyncForEachCell","currentValue","nonZeroNeighbors","getNonZeroNeighbors","filter","neighborColumnIndex","neighborRowIndex","length","setCell","forEach","mergeIdenticalIslands","Promise","resolve","numOfIslands","islands","Set","forEachCell","add","size","lastIslandId","islandIdToIndices","Array","concat","push","identicalIslands","islandId","flatMap","yOffset","xOffset","x","y","getNeighborIndices","findNumOfIslands","BoardVisualizer","colors","setColors","generateColors","endIndex","generatedColors","randomColor","reduce","acc","newColor","has","generateNewColor","SolverPage","ongoingBoard","ongoingBoardId","setOgnoingBoardAndId","answer","setAnswer","snackbarOpen","setSnackbarOpen","isMounted","useRef","current","snackbarMessage","sleepLength","ms","setTimeout","then","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","message","action","Fragment","createMuiTheme","palette","primary","pink","typography","overrides","MuiButton","root","textTransform","App","ThemeProvider","theme","customTheme","BoardBuild","Solver","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f10269a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Dimensions } from \"../../types/Dimensions\";\nimport {\n  TextField,\n  Button,\n  makeStyles,\n  Box,\n  Typography\n} from \"@material-ui/core\";\n\ntype ChooseDimenssionPageProps = {\n  setBoardDim: (dimensions: Dimensions) => void;\n};\n\nconst useStyles = makeStyles(_ => ({\n  dimensionsConatiner: {\n    display: \"inline-flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  crossSign: {\n    fontSize: \"1.5em\",\n    margin: \"0 .5em\"\n  }\n}));\n\nconst ChooseDimenssionPage = ({ setBoardDim }: ChooseDimenssionPageProps) => {\n  const classes = useStyles();\n\n  const DEFAULT_DIM = 8;\n  const [width, setWidth] = useState(DEFAULT_DIM);\n  const [height, setHeight] = useState(DEFAULT_DIM);\n  const chooseDimenssion = () => {\n    setBoardDim({ width, height });\n  };\n  return (\n    <form>\n      <Box mb={2}>\n        <Typography>Please enter bitmap size:</Typography>\n      </Box>\n      <div className={classes.dimensionsConatiner}>\n        <TextField\n          label=\"Width\"\n          variant=\"filled\"\n          type=\"number\"\n          defaultValue={DEFAULT_DIM}\n          onChange={e => setWidth(parseInt(e.target.value))}\n        />\n        <div className={classes.crossSign}>×</div>\n        <TextField\n          label=\"Height\"\n          variant=\"filled\"\n          type=\"number\"\n          defaultValue={DEFAULT_DIM}\n          onChange={e => setHeight(parseInt(e.target.value))}\n        />\n      </div>\n      <Box m={3}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={_ => chooseDimenssion()}\n        >\n          Choose\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nexport default ChooseDimenssionPage;\n","import React, { forwardRef } from \"react\";\nimport { makeStyles, ButtonBase, Paper } from \"@material-ui/core\";\nimport { FixedSizeGrid as Grid } from \"react-window\";\nimport { Dimensions } from \"../../types/Dimensions\";\n\ntype BoardEditorProps = {\n  boardDim: Dimensions;\n  data: number[][];\n  toggleCell: (rowIndex: number, clomunIndex: number) => void;\n  width: number;\n  height: number;\n  paddingBottom: number;\n};\n\nexport const useStyles = makeStyles(_ => ({\n  gridContainer: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  islandPaperContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  islandPaper: {\n    display: \"inline-block\",\n    fontFamily: \"Jetbrains Mono\",\n    height: \"32px\",\n    width: \"32px\",\n    lineHeight: \"32px\",\n    textAlign: \"center\",\n    fontSize: \"16px\",\n    background: \"red\"\n  }\n}));\n\ntype CellProps = {\n  columnIndex: number;\n  rowIndex: number;\n  style: any;\n};\n\nexport const BOARD_GUTTER_SIZE = 8;\n\nconst innerElementType = (paddingBottom: number) =>\n  forwardRef((props: any, ref: any) => {\n    const { style, ...rest } = props;\n\n    return (\n      <div\n        ref={ref}\n        style={{\n          ...style,\n          paddingLeft: BOARD_GUTTER_SIZE,\n          paddingTop: BOARD_GUTTER_SIZE,\n          height: `${parseFloat(style.height) + paddingBottom}px`\n        }}\n        {...rest}\n      />\n    );\n  });\n\nconst BoardEditor = ({\n  boardDim,\n  data,\n  toggleCell,\n  width,\n  height,\n  paddingBottom\n}: BoardEditorProps) => {\n  const classes = useStyles();\n\n  const Cell = ({ columnIndex, rowIndex, style }: CellProps) => {\n    const value = data[rowIndex][columnIndex];\n    return (\n      <ButtonBase\n        focusRipple\n        className={classes.islandPaperContainer}\n        key={`${columnIndex},${rowIndex}`}\n        onClick={_ => toggleCell(rowIndex, columnIndex)}\n        style={{\n          ...style,\n          left: style.left + BOARD_GUTTER_SIZE,\n          top: style.top + BOARD_GUTTER_SIZE,\n          width: style.width - BOARD_GUTTER_SIZE,\n          height: style.height - BOARD_GUTTER_SIZE\n        }}\n      >\n        <Paper\n          className={classes.islandPaper}\n          style={{\n            backgroundColor: value === 0 ? \"#b3e5fc\" : \"#9a472d\",\n            color: value === 0 ? \"#000\" : \"#fff\",\n            transition: \"background-color .2s ease\"\n          }}\n          elevation={2}\n        >\n          {value}\n        </Paper>\n      </ButtonBase>\n    );\n  };\n\n  return (\n    <div className={classes.gridContainer}>\n      <Grid\n        columnCount={boardDim.width}\n        rowCount={boardDim.height}\n        columnWidth={32 + BOARD_GUTTER_SIZE * 2}\n        rowHeight={32 + BOARD_GUTTER_SIZE * 2}\n        height={height}\n        width={width}\n        innerElementType={innerElementType(paddingBottom)}\n      >\n        {Cell}\n      </Grid>\n    </div>\n  );\n};\n\nexport default BoardEditor;\n","import { useState, useEffect } from \"react\";\n\ntype WindowSize = {\n  width: number;\n  height: number;\n};\n\nexport default function useWindowSize(): WindowSize {\n  const isClient = typeof window === \"object\";\n\n  function getSize(): WindowSize {\n    return {\n      width: isClient ? window.innerWidth : 0,\n      height: isClient ? window.innerHeight : 0\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return windowSize;\n}\n","import React, { useState } from \"react\";\nimport { Dimensions } from \"../../types/Dimensions\";\nimport _ from \"lodash\";\nimport { Button, Box, IconButton, makeStyles } from \"@material-ui/core\";\nimport BoardEditor, { BOARD_GUTTER_SIZE } from \"./BoardEditor\";\nimport { Fullscreen, FullscreenExit, Home } from \"@material-ui/icons\";\nimport useWindowSize from \"../../utils/windowSizeHook\";\n\ntype SetDataPageProps = {\n  boardDim: Dimensions;\n  setBoardData: (data: number[][]) => void;\n  goHome: () => void;\n  fullScreenMode: boolean;\n  setFullScreenMode: (fullScreenMode: boolean) => void;\n};\n\nconst useStyles = makeStyles(_ => ({\n  controllersConatiner: {\n    position: \"fixed\",\n    bottom: 0,\n    left: 0,\n    width: \"100%\",\n    backdropFilter: \"blur(7px)\",\n    backgroundColor: \"rgba(255, 255, 255, .5)\",\n    padding: \"10px 0\"\n  }\n}));\n\nconst SetDataPage = ({\n  boardDim,\n  setBoardData,\n  goHome,\n  fullScreenMode,\n  setFullScreenMode\n}: SetDataPageProps) => {\n  const classes = useStyles();\n\n  const [data, setData] = useState(\n    _.range(boardDim.height).map(__ => _.range(boardDim.width).map(__ => 0))\n  );\n\n  const windowSize = useWindowSize();\n\n  const toggleCell = (row: number, column: number) => {\n    setData([\n      ...data.slice(0, row),\n      [\n        ...data[row].slice(0, column),\n        data[row][column] === 1 ? 0 : 1,\n        ...data[row].slice(column + 1)\n      ],\n      ...data.slice(row + 1)\n    ]);\n  };\n\n  const submit = () => {\n    setBoardData(data);\n  };\n\n  const randomize = () => {\n    setData(\n      _.range(boardDim.height).map(__ =>\n        _.range(boardDim.width).map(__ =>\n          // make the probabilty for sea higher\n          Math.floor(Math.random() * 3) >= 1 ? 0 : 1\n        )\n      )\n    );\n  };\n\n  return (\n    <div>\n      <Box mb={2}>\n        <BoardEditor\n          boardDim={boardDim}\n          data={data}\n          toggleCell={toggleCell}\n          width={\n            fullScreenMode\n              ? windowSize.width\n              : Math.min(\n                  boardDim.width * (32 + BOARD_GUTTER_SIZE * 2) + 20,\n                  400\n                )\n          }\n          height={\n            fullScreenMode\n              ? windowSize.height\n              : Math.min(\n                  boardDim.height * (32 + BOARD_GUTTER_SIZE * 2) + 20,\n                  400\n                )\n          }\n          paddingBottom={fullScreenMode ? 80 : 0}\n        />\n      </Box>\n\n      <Box\n        mt={2}\n        className={fullScreenMode ? classes.controllersConatiner : \"\"}\n      >\n        <Box component=\"span\">\n          <IconButton\n            color={fullScreenMode ? \"inherit\" : \"primary\"}\n            onClick={goHome}\n          >\n            <Home />\n          </IconButton>\n        </Box>\n\n        {(boardDim.width > 8 || boardDim.height > 8) && (\n          <Box component=\"span\">\n            <IconButton\n              color={fullScreenMode ? \"inherit\" : \"primary\"}\n              onClick={_ => setFullScreenMode(!fullScreenMode)}\n            >\n              {fullScreenMode ? <FullscreenExit /> : <Fullscreen />}\n            </IconButton>\n          </Box>\n        )}\n\n        <Box component=\"span\" ml={2}>\n          <Button variant=\"contained\" onClick={_ => randomize()}>\n            Randomize\n          </Button>\n        </Box>\n\n        <Box component=\"span\" ml={2}>\n          <Button variant=\"contained\" color=\"primary\" onClick={_ => submit()}>\n            Set\n          </Button>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default SetDataPage;\n","import { Dimensions } from \"./Dimensions\";\n\nexport class Board {\n  dimensions: Dimensions;\n  data: number[][];\n\n  constructor(dimensions: Dimensions, data: number[][]) {\n    this.dimensions = dimensions;\n    this.data = data;\n  }\n\n  toString(): String {\n    return this.data.map(row => row.join(\" \")).join(\"\\n\");\n  }\n\n  toArrayString(): String {\n    return this.data.map(row => \"[\" + row.join(\",\") + \"]\").join(\",\");\n  }\n\n  clone(): Board {\n    return new Board(\n      { ...this.dimensions },\n      this.data.map(row => [...row])\n    );\n  }\n\n  isInBounds(rowIndex: number, columnIndex: number): boolean {\n    return (\n      0 <= columnIndex &&\n      columnIndex < this.dimensions.width &&\n      0 <= rowIndex &&\n      rowIndex < this.dimensions.height\n    );\n  }\n\n  getCell(rowIndex: number, columnIndex: number): number {\n    if (!this.isInBounds(rowIndex, columnIndex)) {\n      throw new Error(\n        `Invalid index (${columnIndex}, ${rowIndex}) in board with ` +\n          `dimensions ${JSON.stringify(this.dimensions)}`\n      );\n    }\n\n    return this.data[rowIndex][columnIndex];\n  }\n\n  setCell(rowIndex: number, columnIndex: number, value: number) {\n    if (!this.isInBounds(rowIndex, columnIndex)) {\n      throw new Error(\n        `Invalid index (${columnIndex}, ${rowIndex}) in board with ` +\n          `dimensions ${JSON.stringify(this.dimensions)}`\n      );\n    }\n\n    this.data[rowIndex][columnIndex] = value;\n  }\n\n  forEachCell(\n    callback: (rowIndex: number, columnIndex: number, value: number) => void\n  ) {\n    for (let rowIndex = 0; rowIndex < this.dimensions.height; rowIndex++) {\n      for (\n        let columnIndex = 0;\n        columnIndex < this.dimensions.width;\n        columnIndex++\n      ) {\n        callback(rowIndex, columnIndex, this.getCell(rowIndex, columnIndex));\n      }\n    }\n  }\n\n  async asyncForEachCell(\n    callback: (rowIndex: number, columnIndex: number, value: number) => void\n  ) {\n    for (let rowIndex = 0; rowIndex < this.dimensions.height; rowIndex++) {\n      for (\n        let columnIndex = 0;\n        columnIndex < this.dimensions.width;\n        columnIndex++\n      ) {\n        await callback(\n          rowIndex,\n          columnIndex,\n          this.getCell(rowIndex, columnIndex)\n        );\n      }\n    }\n  }\n}\n","import React, { useState } from \"react\";\nimport ChooseDimenssionPage from \"./ChooseDimenssionPage\";\nimport SetDataPage from \"./SetDataPage\";\nimport { Dimensions } from \"../../types/Dimensions\";\nimport { Board } from \"../../types/Board\";\n\ntype BoardBuildPageProps = {\n  setBoard: (board: Board | null) => void;\n  fullScreenMode: boolean;\n  setFullScreenMode: (fullScreenMode: boolean) => void;\n};\n\nconst BoardBuildPage = ({\n  setBoard,\n  fullScreenMode,\n  setFullScreenMode\n}: BoardBuildPageProps) => {\n  const [dimensions, setDimensions] = useState<Dimensions | null>(null);\n\n  const setBoardDataAndSubmit = (newData: number[][]) => {\n    if (dimensions == null) return;\n    const board = new Board(dimensions, newData);\n    setBoard(board);\n  };\n\n  return (\n    <div className=\"App\">\n      {dimensions == null && (\n        <ChooseDimenssionPage setBoardDim={setDimensions} />\n      )}\n      {dimensions != null && (\n        <SetDataPage\n          boardDim={dimensions}\n          setBoardData={setBoardDataAndSubmit}\n          goHome={() => {\n            setDimensions(null);\n            setFullScreenMode(false);\n          }}\n          fullScreenMode={fullScreenMode}\n          setFullScreenMode={setFullScreenMode}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default BoardBuildPage;\n","import { Board } from \"../types/Board\";\nimport _ from \"lodash\";\n\nasync function findNumOfIslands(\n  originalBoard: Board,\n  sideEffect: (board: Board) => void,\n  quickRun: boolean,\n  sleep: () => Promise<any>\n): Promise<number> {\n  const board = originalBoard.clone();\n  let nextIslandId = 2;\n\n  await board.asyncForEachCell(async (rowIndex, columnIndex, currentValue) => {\n    if (currentValue === 0) {\n      return;\n    }\n\n    if (!quickRun) await sleep();\n\n    if (currentValue === 1) {\n      const nonZeroNeighbors = getNonZeroNeighbors(\n        board,\n        rowIndex,\n        columnIndex\n      );\n\n      const visitedNonZeroNeighbors = nonZeroNeighbors.filter(\n        ([neighborColumnIndex, neighborRowIndex]) =>\n          board.getCell(neighborRowIndex, neighborColumnIndex) > 1\n      );\n      if (visitedNonZeroNeighbors.length === 0) {\n        board.setCell(rowIndex, columnIndex, nextIslandId);\n        await nonZeroNeighbors.forEach(\n          async ([neighborColumnIndex, neighborRowIndex]) => {\n            board.setCell(neighborRowIndex, neighborColumnIndex, nextIslandId);\n            if (!quickRun) {\n              sideEffect(board);\n              await sleep();\n            }\n          }\n        );\n        nextIslandId++;\n      }\n    }\n\n    if (currentValue > 1) {\n      await getNonZeroNeighbors(board, rowIndex, columnIndex).forEach(\n        async ([neighborColumnIndex, neighborRowIndex]) => {\n          board.setCell(neighborRowIndex, neighborColumnIndex, currentValue);\n          if (!quickRun) {\n            sideEffect(board);\n            await sleep();\n          }\n        }\n      );\n    }\n  });\n\n  await mergeIdenticalIslands(\n    board,\n    nextIslandId - 1,\n    quickRun,\n    sideEffect,\n    sleep\n  );\n\n  if (quickRun) {\n    sideEffect(board);\n  }\n\n  return Promise.resolve(numOfIslands(board));\n}\n\nconst numOfIslands = (board: Board) => {\n  const islands = new Set<number>();\n  board.forEachCell((_, __, currentValue) => {\n    if (currentValue > 1) islands.add(currentValue);\n  });\n\n  return islands.size;\n};\n\nasync function mergeIdenticalIslands(\n  board: Board,\n  lastIslandId: number,\n  quickRun: boolean,\n  sideEffect: (board: Board) => void,\n  sleep: () => Promise<any>\n) {\n  let islandIdToIndices = [\n    new Array<[number, number]>(),\n    new Array<[number, number]>()\n  ].concat(\n    _.range(2, lastIslandId + 1).map(_ => new Array<[number, number]>())\n  );\n\n  board.forEachCell((rowIndex, columnIndex, currentValue) => {\n    if (currentValue > 1) {\n      islandIdToIndices[currentValue].push([rowIndex, columnIndex]);\n    }\n  });\n\n  await board.asyncForEachCell(async (rowIndex, columnIndex, currentValue) => {\n    if (currentValue === 0) {\n      return;\n    }\n    // currentValue can't be 1, as we replaced each 1 with an island ID, that start in 2.\n    const nonZeroNeighbors = getNonZeroNeighbors(board, rowIndex, columnIndex);\n    const identicalIslands = nonZeroNeighbors.map(\n      ([neighborColumnIndex, neighborRowIndex]) =>\n        board.getCell(neighborRowIndex, neighborColumnIndex)\n    );\n    for await (const islandId of identicalIslands.filter(\n      islandId => islandId !== currentValue\n    )) {\n      for await (const [rowIndex, columnIndex] of islandIdToIndices[islandId]) {\n        islandIdToIndices[currentValue].push([rowIndex, columnIndex]);\n        board.setCell(rowIndex, columnIndex, currentValue);\n        if (!quickRun) {\n          sideEffect(board);\n          await sleep();\n        }\n      }\n    }\n  });\n}\n\nconst getNeighborIndices = (\n  board: Board,\n  rowIndex: number,\n  columnIndex: number\n) => {\n  const neighborIndices = _.range(-1, 2)\n    .flatMap(yOffset => _.range(-1, 2).map(xOffset => [xOffset, yOffset]))\n    .filter(([x, y]) => x !== 0 || y !== 0)\n    .map(([x, y]) => [columnIndex + x, rowIndex + y])\n    .filter(\n      ([x, y]) =>\n        0 <= x &&\n        x < board.dimensions.width &&\n        0 <= y &&\n        y < board.dimensions.height\n    );\n\n  return neighborIndices;\n};\n\nconst getNonZeroNeighbors = (\n  board: Board,\n  rowIndex: number,\n  columnIndex: number\n) => {\n  const neighborIndices = getNeighborIndices(board, rowIndex, columnIndex);\n  return neighborIndices.filter(\n    ([neighborColumnIndex, neighborRowIndex]) =>\n      board.getCell(neighborRowIndex, neighborColumnIndex) > 0\n  );\n};\n\nexport default findNumOfIslands;\n","import React, { forwardRef, useState } from \"react\";\nimport { Board } from \"../../types/Board\";\nimport { makeStyles, Paper } from \"@material-ui/core\";\nimport { FixedSizeGrid as Grid } from \"react-window\";\nimport _ from \"lodash\";\n\ntype BoardVisualizerProps = {\n  board: Board;\n  width: number;\n  height: number;\n  paddingBottom: number;\n};\n\nexport const useStyles = makeStyles(_ => ({\n  gridContainer: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  islandPaperContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  islandPaper: {\n    display: \"inline-block\",\n    fontFamily: \"Jetbrains Mono\",\n    height: \"32px\",\n    width: \"32px\",\n    lineHeight: \"32px\",\n    textAlign: \"center\",\n    fontSize: \"16px\",\n    background: \"red\"\n  }\n}));\n\ntype CellProps = {\n  columnIndex: number;\n  rowIndex: number;\n  style: any;\n};\n\nexport const BOARD_GUTTER_SIZE = 8;\n\nconst innerElementType = (paddingBottom: number) =>\n  forwardRef((props: any, ref: any) => {\n    const { style, ...rest } = props;\n\n    return (\n      <div\n        ref={ref}\n        style={{\n          ...style,\n          paddingLeft: BOARD_GUTTER_SIZE,\n          paddingTop: BOARD_GUTTER_SIZE,\n          height: `${parseFloat(style.height) + paddingBottom}px`\n        }}\n        {...rest}\n      />\n    );\n  });\n\nconst BoardVisualizer = ({\n  board,\n  width,\n  height,\n  paddingBottom\n}: BoardVisualizerProps) => {\n  const classes = useStyles();\n\n  const [colors, setColors] = useState([\"#b3e5fc\", \"#9a472d\"]);\n\n  const generateColors = (endIndex: number) => {\n    const generatedColors = new Set<String>(colors);\n\n    const generateNewColor = () => {\n      const randomColor = () => {\n        const letters = \"0123456789ABCDEF\";\n        return _.range(0, 3).reduce(\n          (acc, _) =>\n            acc +\n            letters[Math.floor(Math.random() * 8)] +\n            letters[Math.floor(Math.random() * 16)],\n          \"#\"\n        );\n      };\n      let newColor = randomColor();\n      while (generatedColors.has(newColor)) newColor = randomColor();\n      generatedColors.add(newColor);\n      return newColor;\n    };\n\n    return colors.concat(\n      _.range(colors.length, endIndex + 1).map(_ => generateNewColor())\n    );\n  };\n\n  const Cell = ({ columnIndex, rowIndex, style }: CellProps) => {\n    const value = board.data[rowIndex][columnIndex];\n    if (value >= colors.length) {\n      setColors(generateColors(value));\n    }\n    return (\n      <div\n        key={`${columnIndex},${rowIndex}`}\n        className={classes.islandPaperContainer}\n        style={{\n          ...style,\n          left: style.left + BOARD_GUTTER_SIZE,\n          top: style.top + BOARD_GUTTER_SIZE,\n          width: style.width - BOARD_GUTTER_SIZE,\n          height: style.height - BOARD_GUTTER_SIZE,\n          padding: 0,\n          margin: 0\n        }}\n      >\n        <Paper\n          className={classes.islandPaper}\n          style={{\n            backgroundColor: colors[value],\n            color: value === 0 ? \"#000\" : \"#fff\",\n            transition: \"background-color .2s ease\"\n          }}\n          elevation={2}\n        >\n          {value}\n        </Paper>\n      </div>\n    );\n  };\n\n  return (\n    <div className={classes.gridContainer}>\n      <Grid\n        columnCount={board.dimensions.width}\n        rowCount={board.dimensions.height}\n        columnWidth={32 + BOARD_GUTTER_SIZE * 2}\n        rowHeight={32 + BOARD_GUTTER_SIZE * 2}\n        height={height}\n        width={width}\n        innerElementType={innerElementType(paddingBottom)}\n      >\n        {Cell}\n      </Grid>\n    </div>\n  );\n};\n\nexport default BoardVisualizer;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Board } from \"../../types/Board\";\nimport findNumOfIslands from \"../../logic/IslandsProblemSolver\";\nimport { sleep } from \"../../utils/sleep\";\nimport BoardVisualizer, { BOARD_GUTTER_SIZE } from \"./BoardVisualizer\";\nimport {\n  Box,\n  Button,\n  Snackbar,\n  makeStyles,\n  IconButton\n} from \"@material-ui/core\";\nimport useWindowSize from \"../../utils/windowSizeHook\";\nimport { FullscreenExit, Fullscreen, Home } from \"@material-ui/icons\";\n\ntype SolverPageProps = {\n  originalBoard: Board;\n  goHome: () => void;\n  fullScreenMode: boolean;\n  setFullScreenMode: (fullScreenMode: boolean) => void;\n};\n\nconst useStyles = makeStyles(_ => ({\n  controllersConatiner: {\n    position: \"fixed\",\n    bottom: 0,\n    left: 0,\n    width: \"100%\",\n    backdropFilter: \"blur(7px)\",\n    backgroundColor: \"rgba(255, 255, 255, .5)\",\n    padding: \"10px 0\"\n  }\n}));\n\nconst SolverPage = ({\n  originalBoard,\n  goHome,\n  fullScreenMode,\n  setFullScreenMode\n}: SolverPageProps) => {\n  const classes = useStyles();\n\n  const [[ongoingBoard, ongoingBoardId], setOgnoingBoardAndId] = useState<\n    [Board, number]\n  >([originalBoard.clone(), 0]);\n  const [answer, setAnswer] = useState<number | null>(null);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  const windowSize = useWindowSize();\n\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const solve = () => {\n    const quickRun =\n      originalBoard.dimensions.height * originalBoard.dimensions.width > 1000;\n\n    const sleepLength =\n      originalBoard.dimensions.height * originalBoard.dimensions.width > 400\n        ? 1\n        : originalBoard.dimensions.height * originalBoard.dimensions.width > 200\n        ? 5\n        : originalBoard.dimensions.height * originalBoard.dimensions.width > 100\n        ? 10\n        : 100;\n\n    findNumOfIslands(\n      originalBoard,\n      (board: Board) => {\n        if (!isMounted.current) return;\n        setOgnoingBoardAndId([board, (ongoingBoardId + 1) % 4]);\n      },\n      quickRun,\n      () => sleep(sleepLength)\n    ).then(answer => {\n      if (!isMounted.current) return;\n      setAnswer(answer);\n      setSnackbarOpen(true);\n    });\n  };\n\n  const snackbarMessage =\n    answer === 0\n      ? \"There are'nt islands.\"\n      : answer === 1\n      ? \"There is a single island.\"\n      : `There are ${answer} islands.`;\n\n  return (\n    <div>\n      <Box mb={2}>\n        <BoardVisualizer\n          board={ongoingBoard}\n          width={\n            fullScreenMode\n              ? windowSize.width\n              : Math.min(\n                  originalBoard.dimensions.width *\n                    (32 + BOARD_GUTTER_SIZE * 2) +\n                    20,\n                  400\n                )\n          }\n          height={\n            fullScreenMode\n              ? windowSize.height\n              : Math.min(\n                  originalBoard.dimensions.height *\n                    (32 + BOARD_GUTTER_SIZE * 2) +\n                    20,\n                  400\n                )\n          }\n          paddingBottom={fullScreenMode ? 80 : 0}\n        />\n      </Box>\n\n      <Box\n        mt={2}\n        className={fullScreenMode ? classes.controllersConatiner : \"\"}\n      >\n        <Box component=\"span\">\n          <IconButton\n            color={fullScreenMode ? \"inherit\" : \"primary\"}\n            onClick={goHome}\n          >\n            <Home />\n          </IconButton>\n        </Box>\n\n        {(originalBoard.dimensions.width > 8 ||\n          originalBoard.dimensions.height > 8) && (\n          <Box component=\"span\">\n            <IconButton\n              color={fullScreenMode ? \"inherit\" : \"primary\"}\n              onClick={_ => setFullScreenMode(!fullScreenMode)}\n            >\n              {fullScreenMode ? <FullscreenExit /> : <Fullscreen />}\n            </IconButton>\n          </Box>\n        )}\n\n        <Box component=\"span\" ml={2}>\n          <Button variant=\"contained\" color=\"primary\" onClick={solve}>\n            Solve\n          </Button>\n        </Box>\n      </Box>\n\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\"\n        }}\n        open={snackbarOpen}\n        onClose={_ => setSnackbarOpen(false)}\n        message={snackbarMessage}\n        action={\n          <React.Fragment>\n            <Button\n              color=\"secondary\"\n              size=\"small\"\n              onClick={_ => setSnackbarOpen(false)}\n            >\n              Ok\n            </Button>\n          </React.Fragment>\n        }\n      />\n    </div>\n  );\n};\n\nexport default SolverPage;\n","export function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport pink from \"@material-ui/core/colors/pink\";\n\nexport default createMuiTheme({\n  palette: {\n    primary: pink\n  },\n  typography: {\n    fontFamily: \"Jetbrains Mono\",\n    fontSize: 14\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        textTransform: \"capitalize\"\n      }\n    }\n  }\n});\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Board } from \"./types/Board\";\nimport BoardBuildPage from \"./pages/BoardBuild\";\nimport SolverPage from \"./pages/Solver\";\nimport \"./fonts/stylesheet.css\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport customTheme from \"./themes/custom\";\n\nconst App = () => {\n  const [board, setBoard] = useState<Board | null>(null);\n  const [fullScreenMode, setFullScreenMode] = useState(false);\n  return (\n    <ThemeProvider theme={customTheme}>\n      <div className={`App`}>\n        {board == null && (\n          <BoardBuildPage\n            setBoard={setBoard}\n            fullScreenMode={fullScreenMode}\n            setFullScreenMode={setFullScreenMode}\n          />\n        )}\n        {board != null && (\n          <SolverPage\n            originalBoard={board}\n            goHome={() => {\n              setBoard(null);\n              setFullScreenMode(false);\n            }}\n            fullScreenMode={fullScreenMode}\n            setFullScreenMode={setFullScreenMode}\n          />\n        )}\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}