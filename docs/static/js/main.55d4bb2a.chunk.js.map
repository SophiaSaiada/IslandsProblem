{"version":3,"sources":["pages/BoardBuild/ChooseDimenssionPage.tsx","pages/BoardBuild/BoardEditor.tsx","pages/BoardBuild/SetDataPage.tsx","types/Board.ts","pages/BoardBuild/index.tsx","logic/IslandsProblemSolver.ts","pages/Solver/BoardVisualizer.tsx","pages/Solver/index.tsx","logic/utils.ts","themes/custom.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","_","dimensionsConatiner","display","flexDirection","alignItems","crossSign","fontSize","margin","ChooseDimenssionPage","setBoardDim","classes","useState","width","setWidth","height","setHeight","Box","mb","Typography","className","TextField","id","label","variant","type","defaultValue","onChange","e","parseInt","target","value","m","Button","color","onClick","gridContainer","justifyContent","islandPaperContainer","islandPaper","fontFamily","lineHeight","textAlign","background","innerElementType","forwardRef","props","ref","style","rest","paddingLeft","paddingTop","BoardEditor","boardDim","data","toggleCell","columnCount","rowCount","columnWidth","rowHeight","Math","min","columnIndex","rowIndex","ButtonBase","focusRipple","key","left","top","Paper","backgroundColor","lightBlue","orange","transition","elevation","SetDataPage","setBoardData","range","map","__","setData","row","column","slice","component","mt","round","random","ml","Board","dimensions","this","join","isInBounds","Error","JSON","stringify","callback","getCell","BoardBuildPage","setBoard","setDimensions","newData","board","originalBoard","sideEffect","quickRun","sleep","a","clone","nextIslandId","asyncForEachCell","currentValue","nonZeroNeighbors","getNonZeroNeighbors","filter","neighborColumnIndex","neighborRowIndex","length","setCell","forEach","mergeIdenticalIslands","Promise","resolve","numOfIslands","islands","Set","forEachCell","add","size","lastIslandId","islandIdToIndices","Object","fromEntries","islandId","Array","push","identicalIslands","flatMap","yOffset","xOffset","x","y","getNeighborIndices","findNumOfIslands","BoardVisualizer","padding","SolverPage","goHome","ongoingBoard","ongoingBoardId","setOgnoingBoardAndId","answer","setAnswer","snackbarOpen","setSnackbarOpen","snackbarMessage","sleepLength","ms","setTimeout","then","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","message","action","Fragment","createMuiTheme","palette","primary","pink","typography","overrides","MuiButton","root","textTransform","App","ThemeProvider","theme","customTheme","BoardBuild","Solver","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAQMA,EAAYC,aAAW,SAAAC,GAAC,MAAK,CACjCC,oBAAqB,CACnBC,QAAS,cACTC,cAAe,MACfC,WAAY,UAEdC,UAAW,CACTC,SAAU,QACVC,OAAQ,cAmDGC,EA/Cc,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YACxBC,EAAUZ,IAD2D,EAGjDa,mBAAS,GAHwC,mBAGpEC,EAHoE,KAG7DC,EAH6D,OAI/CF,mBAAS,GAJsC,mBAIpEG,EAJoE,KAI5DC,EAJ4D,KAQ3E,OACE,8BACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,mCAIF,yBAAKC,UAAWT,EAAQT,qBACtB,kBAACmB,EAAA,EAAD,CACEC,GAAG,eACHC,MAAM,QACNC,QAAQ,SACRC,KAAK,SACLC,aAAc,EACdC,SAAU,SAAAC,GAAC,OAAId,EAASe,SAASD,EAAEE,OAAOC,WAE5C,yBAAKX,UAAWT,EAAQL,WAAxB,QACA,kBAACe,EAAA,EAAD,CACEC,GAAG,eACHC,MAAM,SACNC,QAAQ,SACRC,KAAK,SACLC,aAAc,EACdC,SAAU,SAAAC,GAAC,OAAIZ,EAAUa,SAASD,EAAEE,OAAOC,YAG/C,kBAACd,EAAA,EAAD,CAAKe,EAAG,GACN,kBAACC,EAAA,EAAD,CACET,QAAQ,YACRU,MAAM,UACNC,QAAS,SAAAlC,GAhCfS,EAAY,CAAEG,QAAOE,aA6BjB,a,mGC1CKhB,EAAYC,aAAW,SAAAC,GAAC,MAAK,CACxCmC,cAAe,CACbjC,QAAS,OACTkC,eAAgB,UAElBC,qBAAsB,CACpBnC,QAAS,OACTE,WAAY,SACZgC,eAAgB,UAElBE,YAAa,CACXpC,QAAS,eACTqC,WAAY,iBACZzB,OAAQ,OACRF,MAAO,OACP4B,WAAY,OACZC,UAAW,SACXnC,SAAU,OACVoC,WAAY,WAYVC,EAAmBC,sBAAW,SAACC,EAAYC,GAAc,IACrDC,EAAmBF,EAAnBE,MAAUC,EAD0C,YACjCH,EADiC,WAG5D,OACE,uCACEC,IAAKA,EACLC,MAAK,eACAA,EADA,CAEHE,YAVY,EAWZC,WAXY,KAaVF,OAsDKG,EAlDK,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAC/B5C,EAAUZ,IAgChB,OACE,yBAAKqB,UAAWT,EAAQyB,eACtB,kBAAC,IAAD,CACEoB,YAAaH,EAASxC,MACtB4C,SAAUJ,EAAStC,OACnB2C,YAAa,GACbC,UAAW,GACX5C,OAAQ6C,KAAKC,IAAI,GAAAR,EAAStC,OAAkC,GAAI,KAChEF,MAAO+C,KAAKC,IAAI,GAAAR,EAASxC,MAAiC,GAAI,KAC9D+B,iBAAkBA,IAvCX,SAAC,GAAiD,IAA/CkB,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,SAAUf,EAAuB,EAAvBA,MAC/BjB,EAAQuB,EAAKS,GAAUD,GAC7B,OACE,kBAACE,EAAA,EAAD,CACEC,aAAW,EACX7C,UAAWT,EAAQ2B,qBACnB4B,IAAG,UAAKJ,EAAL,YAAoBC,GACvB5B,QAAS,SAAAlC,GAAC,OAAIsD,EAAWQ,EAAUD,IACnCd,MAAK,eACAA,EADA,CAEHmB,KAAMnB,EAAMmB,KA9BF,EA+BVC,IAAKpB,EAAMoB,IA/BD,EAgCVvD,MAAOmC,EAAMnC,MAhCH,EAiCVE,OAAQiC,EAAMjC,OAjCJ,KAoCZ,kBAACsD,EAAA,EAAD,CACEjD,UAAWT,EAAQ4B,YACnBS,MAAO,CACLsB,gBAA2B,IAAVvC,EAAcwC,IAAU,KAAOC,IAAO,KACvDC,WAAY,6BAEdC,UAAW,GAEV3C,SCxBI4C,EAlDK,SAAC,GAAkD,IAAhDtB,EAA+C,EAA/CA,SAAUuB,EAAqC,EAArCA,aAAqC,EAC5ChE,mBACtBX,IAAE4E,MAAMxB,EAAStC,QAAQ+D,KAAI,SAAAC,GAAE,OAAI9E,IAAE4E,MAAMxB,EAASxC,OAAOiE,KAAI,SAAAC,GAAE,OAAI,SAFH,mBAC7DzB,EAD6D,KACvD0B,EADuD,KA6BpE,OACE,6BACE,kBAAC/D,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,CAAamC,SAAUA,EAAUC,KAAMA,EAAMC,WA3BhC,SAAC0B,EAAaC,GAC/BF,EAAQ,GAAD,mBACF1B,EAAK6B,MAAM,EAAGF,IADZ,uBAGA3B,EAAK2B,GAAKE,MAAM,EAAGD,IAHnB,CAImB,IAAtB5B,EAAK2B,GAAKC,GAAgB,EAAI,GAJ3B,YAKA5B,EAAK2B,GAAKE,MAAMD,EAAS,MALzB,YAOF5B,EAAK6B,MAAMF,EAAM,UAsBpB,kBAAChE,EAAA,EAAD,CAAKmE,UAAU,OAAOC,GAAI,GACxB,kBAACpD,EAAA,EAAD,CAAQT,QAAQ,YAAYW,QAAS,SAAAlC,GAdzC+E,EACE/E,IAAE4E,MAAMxB,EAAStC,QAAQ+D,KAAI,SAAAC,GAAE,OAC7B9E,IAAE4E,MAAMxB,EAASxC,OAAOiE,KAAI,SAAAC,GAAE,OAAInB,KAAK0B,MAAM1B,KAAK2B,mBAYlD,cAKF,kBAACtE,EAAA,EAAD,CAAKmE,UAAU,OAAOC,GAAI,EAAGG,GAAI,GAC/B,kBAACvD,EAAA,EAAD,CAAQT,QAAQ,YAAYU,MAAM,UAAUC,QAAS,SAAAlC,GAxBzD2E,EAAatB,KAwBT,U,yCCnDKmC,EAAb,WAIE,WAAYC,EAAwBpC,GAAmB,yBAHvDoC,gBAGsD,OAFtDpC,UAEsD,EACpDqC,KAAKD,WAAaA,EAClBC,KAAKrC,KAAOA,EANhB,uDAUI,OAAOqC,KAAKrC,KAAKwB,KAAI,SAAAG,GAAG,OAAIA,EAAIW,KAAK,QAAMA,KAAK,QAVpD,sCAcI,OAAOD,KAAKrC,KAAKwB,KAAI,SAAAG,GAAG,MAAI,IAAMA,EAAIW,KAAK,KAAO,OAAKA,KAAK,OAdhE,8BAkBI,OAAO,IAAIH,EAAJ,eACAE,KAAKD,YACVC,KAAKrC,KAAKwB,KAAI,SAAAG,GAAG,mBAAQA,SApB/B,iCAwBalB,EAAkBD,GAC3B,OACE,GAAKA,GACLA,EAAc6B,KAAKD,WAAW7E,OAC9B,GAAKkD,GACLA,EAAW4B,KAAKD,WAAW3E,SA7BjC,8BAiCUgD,EAAkBD,GACxB,IAAK6B,KAAKE,WAAW9B,EAAUD,GAC7B,MAAM,IAAIgC,MACR,yBAAkBhC,EAAlB,aAAkCC,EAAlC,yCACgBgC,KAAKC,UAAUL,KAAKD,cAIxC,OAAOC,KAAKrC,KAAKS,GAAUD,KAzC/B,8BA4CUC,EAAkBD,EAAqB/B,GAC7C,IAAK4D,KAAKE,WAAW9B,EAAUD,GAC7B,MAAM,IAAIgC,MACR,yBAAkBhC,EAAlB,aAAkCC,EAAlC,yCACgBgC,KAAKC,UAAUL,KAAKD,cAIxCC,KAAKrC,KAAKS,GAAUD,GAAe/B,IApDvC,kCAwDIkE,GAEA,IAAK,IAAIlC,EAAW,EAAGA,EAAW4B,KAAKD,WAAW3E,OAAQgD,IACxD,IACE,IAAID,EAAc,EAClBA,EAAc6B,KAAKD,WAAW7E,MAC9BiD,IAEAmC,EAASlC,EAAUD,EAAa6B,KAAKO,QAAQnC,EAAUD,MAhE/D,gFAsEImC,GAtEJ,yEAwEalC,EAAW,EAxExB,YAwE2BA,EAAW4B,KAAKD,WAAW3E,QAxEtD,iBA0EY+C,EAAc,EA1E1B,YA2EQA,EAAc6B,KAAKD,WAAW7E,OA3EtC,gCA8EcoF,EACJlC,EACAD,EACA6B,KAAKO,QAAQnC,EAAUD,IAjFjC,OA4EQA,IA5ER,sBAwE8DC,IAxE9D,8HCgCeoC,EAxBQ,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAAoC,EACxBxF,mBAA4B,MADJ,mBACrD8E,EADqD,KACzCW,EADyC,KAS5D,OACE,yBAAKjF,UAAU,OACE,MAAdsE,GACC,kBAAC,EAAD,CAAsBhF,YAAa2F,IAEtB,MAAdX,GACC,kBAAC,EAAD,CACErC,SAAUqC,EACVd,aAdsB,SAAC0B,GAC7B,GAAkB,MAAdZ,EAAJ,CACA,IAAMa,EAAQ,IAAId,EAAMC,EAAYY,GACpCF,EAASG,S,4CCbb,WACEC,EACAC,EACAC,EACAC,GAJF,iBAAAC,EAAA,6DAMQL,EAAQC,EAAcK,QACxBC,EAAe,EAPrB,SASQP,EAAMQ,iBAAN,uCAAuB,WAAOhD,EAAUD,EAAakD,GAA9B,eAAAJ,EAAA,yDACN,IAAjBI,EADuB,oDAKtBN,EALsB,gCAKNC,IALM,UAON,IAAjBK,EAPuB,oBAQnBC,EAAmBC,EACvBX,EACAxC,EACAD,GAOqC,IAJPmD,EAAiBE,QAC/C,mCAAEC,EAAF,KAAuBC,EAAvB,YACEd,EAAML,QAAQmB,EAAkBD,GAAuB,KAE/BE,OAlBH,wBAmBvBf,EAAMgB,QAAQxD,EAAUD,EAAagD,GAnBd,UAoBjBG,EAAiBO,QAAjB,uCACJ,iCAAAZ,EAAA,4EAAQQ,EAAR,KAA6BC,EAA7B,KACEd,EAAMgB,QAAQF,EAAkBD,EAAqBN,GAChDJ,EAFP,uBAGID,EAAWF,GAHf,SAIUI,IAJV,2CADI,uDApBiB,QA6BvBG,IA7BuB,aAiCvBE,EAAe,GAjCQ,kCAkCnBE,EAAoBX,EAAOxC,EAAUD,GAAa0D,QAAlD,uCACJ,iCAAAZ,EAAA,4EAAQQ,EAAR,KAA6BC,EAA7B,KACEd,EAAMgB,QAAQF,EAAkBD,EAAqBJ,GAChDN,EAFP,uBAGID,EAAWF,GAHf,SAIUI,IAJV,2CADI,uDAlCmB,4CAAvB,2DATR,uBAuDQc,EACJlB,EACAO,EAAe,EACfJ,EACAD,EACAE,GA5DJ,cA+DMD,GACFD,EAAWF,GAhEf,kBAmESmB,QAAQC,QAAQC,EAAarB,KAnEtC,4C,sBAsEA,IAAMqB,EAAe,SAACrB,GACpB,IAAMsB,EAAU,IAAIC,IAKpB,OAJAvB,EAAMwB,aAAY,SAAC9H,EAAG8E,EAAIiC,GACpBA,EAAe,GAAGa,EAAQG,IAAIhB,MAG7Ba,EAAQI,M,SAGFR,E,sFAAf,WACElB,EACA2B,EACAxB,EACAD,EACAE,GALF,eAAAC,EAAA,6DAOMuB,EAAoBC,OAAOC,YAC7BpI,IAAE4E,MAAM,EAAGqD,EAAe,GAAGpD,KAAI,SAAAwD,GAAQ,MAAI,CAC3CA,EACA,IAAIC,WAGRhC,EAAMwB,aAAY,SAAChE,EAAUD,EAAakD,GACpCA,EAAe,GACjBmB,EAAkBnB,GAAcwB,KAAK,CAACzE,EAAUD,OAftD,SAkBQyC,EAAMQ,iBAAN,uCAAuB,WAAOhD,EAAUD,EAAakD,GAA9B,iBAAAJ,EAAA,yDACN,IAAjBI,EADuB,wDAKrBC,EAAmBC,EAAoBX,EAAOxC,EAAUD,GACxD2E,EAAmBxB,EAAiBnC,KACxC,mCAAEsC,EAAF,KAAuBC,EAAvB,YACEd,EAAML,QAAQmB,EAAkBD,MART,SAUrBqB,EACHtB,QAAO,SAAAmB,GAAQ,OAAIA,IAAatB,KAChCQ,QAFG,uCAEK,WAAMc,GAAN,SAAA1B,EAAA,sEACDuB,EAAkBG,GAAUd,QAA5B,uCACJ,iCAAAZ,EAAA,4EAAQ7C,EAAR,KAAkBD,EAAlB,KACEqE,EAAkBnB,GAAcwB,KAAK,CAACzE,EAAUD,IAChDyC,EAAMgB,QAAQxD,EAAUD,EAAakD,GAChCN,EAHP,uBAIID,EAAWF,GAJf,SAKUI,IALV,2CADI,uDADC,2CAFL,uDAVqB,2CAAvB,2DAlBR,4C,sBA6CA,IAoBMO,EAAsB,SAC1BX,EACAxC,EACAD,GAGA,OA1ByB,SACzByC,EACAxC,EACAD,GAcA,OAZwB7D,IAAE4E,OAAO,EAAG,GACjC6D,SAAQ,SAAAC,GAAO,OAAI1I,IAAE4E,OAAO,EAAG,GAAGC,KAAI,SAAA8D,GAAO,MAAI,CAACA,EAASD,SAC3DxB,QAAO,mCAAE0B,EAAF,KAAKC,EAAL,YAAkB,IAAND,GAAiB,IAANC,KAC9BhE,KAAI,mCAAE+D,EAAF,KAAKC,EAAL,WAAY,CAAChF,EAAc+E,EAAG9E,EAAW+E,MAC7C3B,QACC,mCAAE0B,EAAF,KAAKC,EAAL,YACE,GAAKD,GACLA,EAAItC,EAAMb,WAAW7E,OACrB,GAAKiI,GACLA,EAAIvC,EAAMb,WAAW3E,UAWHgI,CAAmBxC,EAAOxC,EAAUD,GACrCqD,QACrB,mCAAEC,EAAF,KAAuBC,EAAvB,YACEd,EAAML,QAAQmB,EAAkBD,GAAuB,MAI9C4B,E,kDCpJR,IAAMjJ,EAAYC,aAAW,SAAAC,GAAC,MAAK,CACxCmC,cAAe,CACbjC,QAAS,OACTkC,eAAgB,UAElBC,qBAAsB,CACpBnC,QAAS,OACTE,WAAY,SACZgC,eAAgB,UAElBE,YAAa,CACXpC,QAAS,eACTqC,WAAY,iBACZzB,OAAQ,OACRF,MAAO,OACP4B,WAAY,OACZC,UAAW,SACXnC,SAAU,OACVoC,WAAY,WAYVC,EAAmBC,sBAAW,SAACC,EAAYC,GAAc,IACrDC,EAAmBF,EAAnBE,MAAUC,EAD0C,YACjCH,EADiC,WAG5D,OACE,uCACEC,IAAKA,EACLC,MAAK,eACAA,EADA,CAEHE,YAVY,EAWZC,WAXY,KAaVF,OA6DKgG,EAxDS,SAAC,GAAqC,IAAnC1C,EAAkC,EAAlCA,MACnB5F,EAAUZ,IAgChB,OACE,yBAAKqB,UAAWT,EAAQyB,eACtB,kBAAC,IAAD,CACEoB,YAAa+C,EAAMb,WAAW7E,MAC9B4C,SAAU8C,EAAMb,WAAW3E,OAC3B2C,YAAa,GACbC,UAAW,GACX5C,OAAQ6C,KAAKC,IACX,GAAA0C,EAAMb,WAAW3E,OAAkC,GACnD,KAEFF,MAAO+C,KAAKC,IACV,GAAA0C,EAAMb,WAAW7E,MAAiC,GAClD,KAEF+B,iBAAkBA,IA7CX,SAAC,GAAiD,IAA/CkB,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,SAAUf,EAAuB,EAAvBA,MAC/BjB,EAAQwE,EAAMjD,KAAKS,GAAUD,GACnC,OACE,yBACEI,IAAG,UAAKJ,EAAL,YAAoBC,GACvB3C,UAAWT,EAAQ2B,qBACnBU,MAAK,eACAA,EADA,CAEHmB,KAAMnB,EAAMmB,KA7BF,EA8BVC,IAAKpB,EAAMoB,IA9BD,EA+BVvD,MAAOmC,EAAMnC,MA/BH,EAgCVE,OAAQiC,EAAMjC,OAhCJ,EAiCVmI,QAAS,EACT1I,OAAQ,KAGV,kBAAC6D,EAAA,EAAD,CACEjD,UAAWT,EAAQ4B,YACnBS,MAAO,CACLsB,gBAA2B,IAAVvC,EAAcwC,IAAU,KAAOC,IAAO,KACvDC,WAAY,6BAEdC,UAAW,GAEV3C,S,SCOIoH,EAhFI,SAAC,GAAgD,IAA9C3C,EAA6C,EAA7CA,cAAe4C,EAA8B,EAA9BA,OAA8B,EACFxI,mBAE7D,CAAC4F,EAAcK,QAAS,IAHuC,yCACzDwC,EADyD,KAC3CC,EAD2C,KAC1BC,EAD0B,OAIrC3I,mBAAwB,MAJa,mBAI1D4I,EAJ0D,KAIlDC,EAJkD,OAKzB7I,oBAAS,GALgB,mBAK1D8I,EAL0D,KAK5CC,EAL4C,KAgC3DC,EACO,IAAXJ,EACI,wBACW,IAAXA,EACA,4BADA,oBAEaA,EAFb,aAIN,OACE,6BACE,kBAACvI,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,CAAiBqF,MAAO8C,KAG1B,kBAACpI,EAAA,EAAD,CAAKmE,UAAU,OAAOC,GAAI,GACxB,kBAACpD,EAAA,EAAD,CAAQT,QAAQ,YAAYW,QAASiH,GAArC,YAIF,kBAACnI,EAAA,EAAD,CAAKmE,UAAU,OAAOC,GAAI,EAAGG,GAAI,GAC/B,kBAACvD,EAAA,EAAD,CAAQT,QAAQ,YAAYU,MAAM,UAAUC,QA7CpC,WACZ,IAAMuE,EACJF,EAAcd,WAAW3E,OAASyF,EAAcd,WAAW7E,MAAQ,IAE/DgJ,EACJrD,EAAcd,WAAW3E,OAASyF,EAAcd,WAAW7E,MAAQ,IAC/D,GACA2F,EAAcd,WAAW3E,OAASyF,EAAcd,WAAW7E,MAAQ,IACnE,GACA2F,EAAcd,WAAW3E,OAASyF,EAAcd,WAAW7E,MAAQ,IACnE,GACA,IAENmI,EACExC,GACA,SAACD,GACCgD,EAAqB,CAAChD,GAAQ+C,EAAiB,GAAK,MAEtD5C,GACA,kBCpCgBoD,EDoCJD,ECnCT,IAAInC,SAAQ,SAAAC,GAAO,OAAIoC,WAAWpC,EAASmC,MAD7C,IAAeA,KDqChBE,MAAK,SAAAR,GACLC,EAAUD,GACVG,GAAgB,QAuBd,UAKF,kBAACM,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,KAAMX,EACNY,QAAS,SAAArK,GAAC,OAAI0J,GAAgB,IAC9BY,QAASX,EACTY,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACxI,EAAA,EAAD,CACEC,MAAM,YACN+F,KAAK,QACL9F,QAAS,SAAAlC,GAAC,OAAI0J,GAAgB,KAHhC,W,0CE1EGe,cAAe,CAC5BC,QAAS,CACPC,QAASC,KAEXC,WAAY,CACVtI,WAAY,iBACZjC,SAAU,IAEZwK,UAAW,CACTC,UAAW,CACTC,KAAM,CACJC,cAAe,kBCSRC,GAdH,WAAO,IAAD,EACUvK,mBAAuB,MADjC,mBACT2F,EADS,KACFH,EADE,KAEhB,OACE,kBAACgF,EAAA,EAAD,CAAeC,MAAOC,GACpB,yBAAKlK,UAAS,OACF,MAATmF,GAAiB,kBAACgF,EAAD,CAAgBnF,SAAUA,IAClC,MAATG,GACC,kBAACiF,EAAD,CAAYhF,cAAeD,EAAO6C,OAAQ,kBAAMhD,EAAS,YCJ/CqF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.55d4bb2a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Dimensions } from \"../../types/Dimensions\";\nimport { TextField, Button, makeStyles, Box, Typography } from \"@material-ui/core\";\n\ntype ChooseDimenssionPageProps = {\n  setBoardDim: (dimensions: Dimensions) => void;\n};\n\nconst useStyles = makeStyles(_ => ({\n  dimensionsConatiner: {\n    display: \"inline-flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  crossSign: {\n    fontSize: \"1.5em\",\n    margin: \"0 .5em\"\n  }\n}));\n\nconst ChooseDimenssionPage = ({ setBoardDim }: ChooseDimenssionPageProps) => {\n  const classes = useStyles();\n\n  const [width, setWidth] = useState(8);\n  const [height, setHeight] = useState(8);\n  const chooseDimenssion = () => {\n    setBoardDim({ width, height });\n  };\n  return (\n    <form>\n      <Box mb={2}>\n        <Typography>\n          Please enter bitmap size:\n        </Typography>\n      </Box>\n      <div className={classes.dimensionsConatiner}>\n        <TextField\n          id=\"filled-basic\"\n          label=\"Width\"\n          variant=\"filled\"\n          type=\"number\"\n          defaultValue={8}\n          onChange={e => setWidth(parseInt(e.target.value))}\n        />\n        <div className={classes.crossSign}>×</div>\n        <TextField\n          id=\"filled-basic\"\n          label=\"Height\"\n          variant=\"filled\"\n          type=\"number\"\n          defaultValue={8}\n          onChange={e => setHeight(parseInt(e.target.value))}\n        />\n      </div>\n      <Box m={3}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={_ => chooseDimenssion()}\n        >\n          Choose\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nexport default ChooseDimenssionPage;\n","import React, { forwardRef } from \"react\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\nimport orange from \"@material-ui/core/colors/orange\";\nimport { makeStyles, ButtonBase, Paper } from \"@material-ui/core\";\nimport { FixedSizeGrid as Grid } from \"react-window\";\nimport { Dimensions } from \"../../types/Dimensions\";\n\ntype BoardEditorProps = {\n  boardDim: Dimensions;\n  data: number[][];\n  toggleCell: (rowIndex: number, clomunIndex: number) => void;\n};\n\nexport const useStyles = makeStyles(_ => ({\n  gridContainer: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  islandPaperContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  islandPaper: {\n    display: \"inline-block\",\n    fontFamily: \"Jetbrains Mono\",\n    height: \"32px\",\n    width: \"32px\",\n    lineHeight: \"32px\",\n    textAlign: \"center\",\n    fontSize: \"16px\",\n    background: \"red\"\n  }\n}));\n\ntype CellProps = {\n  columnIndex: number;\n  rowIndex: number;\n  style: any;\n};\n\nconst GUTTER_SIZE = 8;\n\nconst innerElementType = forwardRef((props: any, ref: any) => {\n  const { style, ...rest } = props;\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        ...style,\n        paddingLeft: GUTTER_SIZE,\n        paddingTop: GUTTER_SIZE\n      }}\n      {...rest}\n    />\n  );\n});\nconst BoardEditor = ({ boardDim, data, toggleCell }: BoardEditorProps) => {\n  const classes = useStyles();\n\n  const Cell = ({ columnIndex, rowIndex, style }: CellProps) => {\n    const value = data[rowIndex][columnIndex];\n    return (\n      <ButtonBase\n        focusRipple\n        className={classes.islandPaperContainer}\n        key={`${columnIndex},${rowIndex}`}\n        onClick={_ => toggleCell(rowIndex, columnIndex)}\n        style={{\n          ...style,\n          left: style.left + GUTTER_SIZE,\n          top: style.top + GUTTER_SIZE,\n          width: style.width - GUTTER_SIZE,\n          height: style.height - GUTTER_SIZE\n        }}\n      >\n        <Paper\n          className={classes.islandPaper}\n          style={{\n            backgroundColor: value === 0 ? lightBlue[200] : orange[200],\n            transition: \"background-color .2s ease\"\n          }}\n          elevation={2}\n        >\n          {value}\n        </Paper>\n      </ButtonBase>\n    );\n  };\n\n  return (\n    <div className={classes.gridContainer}>\n      <Grid\n        columnCount={boardDim.width}\n        rowCount={boardDim.height}\n        columnWidth={32 + GUTTER_SIZE * 2}\n        rowHeight={32 + GUTTER_SIZE * 2}\n        height={Math.min(boardDim.height * (32 + GUTTER_SIZE * 2) + 20, 400)}\n        width={Math.min(boardDim.width * (32 + GUTTER_SIZE * 2) + 20, 400)}\n        innerElementType={innerElementType}\n      >\n        {Cell}\n      </Grid>\n    </div>\n  );\n};\n\nexport default BoardEditor;\n","import React, { useState } from \"react\";\nimport { Dimensions } from \"../../types/Dimensions\";\nimport _ from \"lodash\";\nimport { Button, Box } from \"@material-ui/core\";\nimport BoardEditor from \"./BoardEditor\";\n\ntype SetDataPageProps = {\n  boardDim: Dimensions;\n  setBoardData: (data: number[][]) => void;\n};\n\nconst SetDataPage = ({ boardDim, setBoardData }: SetDataPageProps) => {\n  const [data, setData] = useState(\n    _.range(boardDim.height).map(__ => _.range(boardDim.width).map(__ => 0))\n  );\n\n  const toggleCell = (row: number, column: number) => {\n    setData([\n      ...data.slice(0, row),\n      [\n        ...data[row].slice(0, column),\n        data[row][column] === 1 ? 0 : 1,\n        ...data[row].slice(column + 1)\n      ],\n      ...data.slice(row + 1)\n    ]);\n  };\n\n  const submit = () => {\n    setBoardData(data);\n  };\n\n  const randomize = () => {\n    setData(\n      _.range(boardDim.height).map(__ =>\n        _.range(boardDim.width).map(__ => Math.round(Math.random()))\n      )\n    );\n  };\n\n  return (\n    <div>\n      <Box mb={2}>\n        <BoardEditor boardDim={boardDim} data={data} toggleCell={toggleCell} />\n      </Box>\n\n      <Box component=\"span\" mt={2}>\n        <Button variant=\"contained\" onClick={_ => randomize()}>\n          Randomize\n        </Button>\n      </Box>\n\n      <Box component=\"span\" mt={2} ml={2}>\n        <Button variant=\"contained\" color=\"primary\" onClick={_ => submit()}>\n          Set\n        </Button>\n      </Box>\n    </div>\n  );\n};\n\nexport default SetDataPage;\n","import { Dimensions } from \"./Dimensions\";\n\nexport class Board {\n  dimensions: Dimensions;\n  data: number[][];\n\n  constructor(dimensions: Dimensions, data: number[][]) {\n    this.dimensions = dimensions;\n    this.data = data;\n  }\n\n  toString(): String {\n    return this.data.map(row => row.join(\" \")).join(\"\\n\");\n  }\n\n  toArrayString(): String {\n    return this.data.map(row => \"[\" + row.join(\",\") + \"]\").join(\",\");\n  }\n\n  clone(): Board {\n    return new Board(\n      { ...this.dimensions },\n      this.data.map(row => [...row])\n    );\n  }\n\n  isInBounds(rowIndex: number, columnIndex: number): boolean {\n    return (\n      0 <= columnIndex &&\n      columnIndex < this.dimensions.width &&\n      0 <= rowIndex &&\n      rowIndex < this.dimensions.height\n    );\n  }\n\n  getCell(rowIndex: number, columnIndex: number): number {\n    if (!this.isInBounds(rowIndex, columnIndex)) {\n      throw new Error(\n        `Invalid index (${columnIndex}, ${rowIndex}) in board with ` +\n          `dimensions ${JSON.stringify(this.dimensions)}`\n      );\n    }\n\n    return this.data[rowIndex][columnIndex];\n  }\n\n  setCell(rowIndex: number, columnIndex: number, value: number) {\n    if (!this.isInBounds(rowIndex, columnIndex)) {\n      throw new Error(\n        `Invalid index (${columnIndex}, ${rowIndex}) in board with ` +\n          `dimensions ${JSON.stringify(this.dimensions)}`\n      );\n    }\n\n    this.data[rowIndex][columnIndex] = value;\n  }\n\n  forEachCell(\n    callback: (rowIndex: number, columnIndex: number, value: number) => void\n  ) {\n    for (let rowIndex = 0; rowIndex < this.dimensions.height; rowIndex++) {\n      for (\n        let columnIndex = 0;\n        columnIndex < this.dimensions.width;\n        columnIndex++\n      ) {\n        callback(rowIndex, columnIndex, this.getCell(rowIndex, columnIndex));\n      }\n    }\n  }\n\n  async asyncForEachCell(\n    callback: (rowIndex: number, columnIndex: number, value: number) => void\n  ) {\n    for (let rowIndex = 0; rowIndex < this.dimensions.height; rowIndex++) {\n      for (\n        let columnIndex = 0;\n        columnIndex < this.dimensions.width;\n        columnIndex++\n      ) {\n        await callback(\n          rowIndex,\n          columnIndex,\n          this.getCell(rowIndex, columnIndex)\n        );\n      }\n    }\n  }\n}\n","import React, { useState } from \"react\";\nimport ChooseDimenssionPage from \"./ChooseDimenssionPage\";\nimport SetDataPage from \"./SetDataPage\";\nimport { Dimensions } from \"../../types/Dimensions\";\nimport { Board } from \"../../types/Board\";\n\ntype BoardBuildPageProps = {\n  setBoard: (board: Board) => void;\n};\n\nconst BoardBuildPage = ({ setBoard }: BoardBuildPageProps) => {\n  const [dimensions, setDimensions] = useState<Dimensions | null>(null);\n\n  const setBoardDataAndSubmit = (newData: number[][]) => {\n    if (dimensions == null) return;\n    const board = new Board(dimensions, newData);\n    setBoard(board);\n  };\n\n  return (\n    <div className=\"App\">\n      {dimensions == null && (\n        <ChooseDimenssionPage setBoardDim={setDimensions} />\n      )}\n      {dimensions != null && (\n        <SetDataPage\n          boardDim={dimensions}\n          setBoardData={setBoardDataAndSubmit}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default BoardBuildPage;\n","import { Board } from \"../types/Board\";\nimport _ from \"lodash\";\n\nasync function findNumOfIslands(\n  originalBoard: Board,\n  sideEffect: (board: Board) => void,\n  quickRun: boolean,\n  sleep: () => Promise<any>\n): Promise<number> {\n  const board = originalBoard.clone();\n  let nextIslandId = 2;\n\n  await board.asyncForEachCell(async (rowIndex, columnIndex, currentValue) => {\n    if (currentValue === 0) {\n      return;\n    }\n\n    if (!quickRun) await sleep();\n\n    if (currentValue === 1) {\n      const nonZeroNeighbors = getNonZeroNeighbors(\n        board,\n        rowIndex,\n        columnIndex\n      );\n\n      const visitedNonZeroNeighbors = nonZeroNeighbors.filter(\n        ([neighborColumnIndex, neighborRowIndex]) =>\n          board.getCell(neighborRowIndex, neighborColumnIndex) > 1\n      );\n      if (visitedNonZeroNeighbors.length === 0) {\n        board.setCell(rowIndex, columnIndex, nextIslandId);\n        await nonZeroNeighbors.forEach(\n          async ([neighborColumnIndex, neighborRowIndex]) => {\n            board.setCell(neighborRowIndex, neighborColumnIndex, nextIslandId);\n            if (!quickRun) {\n              sideEffect(board);\n              await sleep();\n            }\n          }\n        );\n        nextIslandId++;\n      }\n    }\n\n    if (currentValue > 1) {\n      await getNonZeroNeighbors(board, rowIndex, columnIndex).forEach(\n        async ([neighborColumnIndex, neighborRowIndex]) => {\n          board.setCell(neighborRowIndex, neighborColumnIndex, currentValue);\n          if (!quickRun) {\n            sideEffect(board);\n            await sleep();\n          }\n        }\n      );\n    }\n  });\n\n  await mergeIdenticalIslands(\n    board,\n    nextIslandId - 1,\n    quickRun,\n    sideEffect,\n    sleep\n  );\n\n  if (quickRun) {\n    sideEffect(board);\n  }\n\n  return Promise.resolve(numOfIslands(board));\n}\n\nconst numOfIslands = (board: Board) => {\n  const islands = new Set<number>();\n  board.forEachCell((_, __, currentValue) => {\n    if (currentValue > 1) islands.add(currentValue);\n  });\n\n  return islands.size;\n};\n\nasync function mergeIdenticalIslands(\n  board: Board,\n  lastIslandId: number,\n  quickRun: boolean,\n  sideEffect: (board: Board) => void,\n  sleep: () => Promise<any>\n) {\n  let islandIdToIndices = Object.fromEntries(\n    _.range(2, lastIslandId + 1).map(islandId => [\n      islandId,\n      new Array<[number, number]>()\n    ])\n  );\n  board.forEachCell((rowIndex, columnIndex, currentValue) => {\n    if (currentValue > 1)\n      islandIdToIndices[currentValue].push([rowIndex, columnIndex]);\n  });\n\n  await board.asyncForEachCell(async (rowIndex, columnIndex, currentValue) => {\n    if (currentValue === 0) {\n      return;\n    }\n    // currentValue can't be 1, as we replaced each 1 with an island ID, that start in 2.\n    const nonZeroNeighbors = getNonZeroNeighbors(board, rowIndex, columnIndex);\n    const identicalIslands = nonZeroNeighbors.map(\n      ([neighborColumnIndex, neighborRowIndex]) =>\n        board.getCell(neighborRowIndex, neighborColumnIndex)\n    );\n    await identicalIslands\n      .filter(islandId => islandId !== currentValue)\n      .forEach(async islandId => {\n        await islandIdToIndices[islandId].forEach(\n          async ([rowIndex, columnIndex]) => {\n            islandIdToIndices[currentValue].push([rowIndex, columnIndex]);\n            board.setCell(rowIndex, columnIndex, currentValue);\n            if (!quickRun) {\n              sideEffect(board);\n              await sleep();\n            }\n          }\n        );\n      });\n  });\n}\n\nconst getNeighborIndices = (\n  board: Board,\n  rowIndex: number,\n  columnIndex: number\n) => {\n  const neighborIndices = _.range(-1, 2)\n    .flatMap(yOffset => _.range(-1, 2).map(xOffset => [xOffset, yOffset]))\n    .filter(([x, y]) => x !== 0 || y !== 0)\n    .map(([x, y]) => [columnIndex + x, rowIndex + y])\n    .filter(\n      ([x, y]) =>\n        0 <= x &&\n        x < board.dimensions.width &&\n        0 <= y &&\n        y < board.dimensions.height\n    );\n\n  return neighborIndices;\n};\n\nconst getNonZeroNeighbors = (\n  board: Board,\n  rowIndex: number,\n  columnIndex: number\n) => {\n  const neighborIndices = getNeighborIndices(board, rowIndex, columnIndex);\n  return neighborIndices.filter(\n    ([neighborColumnIndex, neighborRowIndex]) =>\n      board.getCell(neighborRowIndex, neighborColumnIndex) > 0\n  );\n};\n\nexport default findNumOfIslands;\n","import React, { forwardRef } from \"react\";\nimport { Board } from \"../../types/Board\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\nimport orange from \"@material-ui/core/colors/orange\";\nimport { makeStyles, Paper } from \"@material-ui/core\";\nimport { FixedSizeGrid as Grid } from \"react-window\";\n\ntype BoardVisualizerProps = {\n  board: Board;\n};\n\nexport const useStyles = makeStyles(_ => ({\n  gridContainer: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  islandPaperContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  islandPaper: {\n    display: \"inline-block\",\n    fontFamily: \"Jetbrains Mono\",\n    height: \"32px\",\n    width: \"32px\",\n    lineHeight: \"32px\",\n    textAlign: \"center\",\n    fontSize: \"16px\",\n    background: \"red\"\n  }\n}));\n\ntype CellProps = {\n  columnIndex: number;\n  rowIndex: number;\n  style: any;\n};\n\nconst GUTTER_SIZE = 8;\n\nconst innerElementType = forwardRef((props: any, ref: any) => {\n  const { style, ...rest } = props;\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        ...style,\n        paddingLeft: GUTTER_SIZE,\n        paddingTop: GUTTER_SIZE\n      }}\n      {...rest}\n    />\n  );\n});\n\nconst BoardVisualizer = ({ board }: BoardVisualizerProps) => {\n  const classes = useStyles();\n\n  const Cell = ({ columnIndex, rowIndex, style }: CellProps) => {\n    const value = board.data[rowIndex][columnIndex];\n    return (\n      <div\n        key={`${columnIndex},${rowIndex}`}\n        className={classes.islandPaperContainer}\n        style={{\n          ...style,\n          left: style.left + GUTTER_SIZE,\n          top: style.top + GUTTER_SIZE,\n          width: style.width - GUTTER_SIZE,\n          height: style.height - GUTTER_SIZE,\n          padding: 0,\n          margin: 0\n        }}\n      >\n        <Paper\n          className={classes.islandPaper}\n          style={{\n            backgroundColor: value === 0 ? lightBlue[200] : orange[200],\n            transition: \"background-color .2s ease\"\n          }}\n          elevation={2}\n        >\n          {value}\n        </Paper>\n      </div>\n    );\n  };\n\n  return (\n    <div className={classes.gridContainer}>\n      <Grid\n        columnCount={board.dimensions.width}\n        rowCount={board.dimensions.height}\n        columnWidth={32 + GUTTER_SIZE * 2}\n        rowHeight={32 + GUTTER_SIZE * 2}\n        height={Math.min(\n          board.dimensions.height * (32 + GUTTER_SIZE * 2) + 20,\n          400\n        )}\n        width={Math.min(\n          board.dimensions.width * (32 + GUTTER_SIZE * 2) + 20,\n          400\n        )}\n        innerElementType={innerElementType}\n      >\n        {Cell}\n      </Grid>\n    </div>\n  );\n};\n\nexport default BoardVisualizer;\n","import React, { useState } from \"react\";\nimport { Board } from \"../../types/Board\";\nimport findNumOfIslands from \"../../logic/IslandsProblemSolver\";\nimport { sleep } from \"../../logic/utils\";\nimport BoardVisualizer from \"./BoardVisualizer\";\nimport { Box, Button, Snackbar } from \"@material-ui/core\";\ntype SolverPageProps = {\n  originalBoard: Board;\n  goHome: () => void;\n};\n\nconst SolverPage = ({ originalBoard, goHome }: SolverPageProps) => {\n  const [[ongoingBoard, ongoingBoardId], setOgnoingBoardAndId] = useState<\n    [Board, number]\n  >([originalBoard.clone(), 0]);\n  const [answer, setAnswer] = useState<number | null>(null);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const solve = () => {\n    const quickRun =\n      originalBoard.dimensions.height * originalBoard.dimensions.width > 800;\n      \n    const sleepLength =\n      originalBoard.dimensions.height * originalBoard.dimensions.width > 400\n        ? 10\n        : originalBoard.dimensions.height * originalBoard.dimensions.width > 200\n        ? 20\n        : originalBoard.dimensions.height * originalBoard.dimensions.width > 100\n        ? 40\n        : 100;\n\n    findNumOfIslands(\n      originalBoard,\n      (board: Board) => {\n        setOgnoingBoardAndId([board, (ongoingBoardId + 1) % 4]);\n      },\n      quickRun,\n      () => sleep(sleepLength)\n    ).then(answer => {\n      setAnswer(answer);\n      setSnackbarOpen(true);\n    });\n  };\n\n  const snackbarMessage =\n    answer === 0\n      ? \"There are'nt islands.\"\n      : answer === 1\n      ? \"There is a single island.\"\n      : `There are ${answer} islands.`;\n\n  return (\n    <div>\n      <Box mb={2}>\n        <BoardVisualizer board={ongoingBoard} />\n      </Box>\n\n      <Box component=\"span\" mt={2}>\n        <Button variant=\"contained\" onClick={goHome}>\n          Go Home\n        </Button>\n      </Box>\n      <Box component=\"span\" mt={2} ml={2}>\n        <Button variant=\"contained\" color=\"primary\" onClick={solve}>\n          Solve\n        </Button>\n      </Box>\n\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\"\n        }}\n        open={snackbarOpen}\n        onClose={_ => setSnackbarOpen(false)}\n        message={snackbarMessage}\n        action={\n          <React.Fragment>\n            <Button\n              color=\"secondary\"\n              size=\"small\"\n              onClick={_ => setSnackbarOpen(false)}\n            >\n              Ok\n            </Button>\n          </React.Fragment>\n        }\n      />\n    </div>\n  );\n};\n\nexport default SolverPage;\n","export function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport pink from \"@material-ui/core/colors/pink\";\n\nexport default createMuiTheme({\n  palette: {\n    primary: pink\n  },\n  typography: {\n    fontFamily: \"Jetbrains Mono\",\n    fontSize: 14\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        textTransform: \"capitalize\"\n      }\n    }\n  }\n});\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Board } from \"./types/Board\";\nimport BoardBuildPage from \"./pages/BoardBuild\";\nimport SolverPage from \"./pages/Solver\";\nimport \"./fonts/stylesheet.css\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport customTheme from \"./themes/custom\";\n\nconst App = () => {\n  const [board, setBoard] = useState<Board | null>(null);\n  return (\n    <ThemeProvider theme={customTheme}>\n      <div className={`App`}>\n        {board == null && <BoardBuildPage setBoard={setBoard} />}\n        {board != null && (\n          <SolverPage originalBoard={board} goHome={() => setBoard(null)} />\n        )}\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}